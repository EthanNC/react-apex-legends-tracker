{"version":3,"sources":["assets/logo.png","components/Header.js","components/Search.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","section","Header","src","logo","Search","useState","submitted","setSubmitted","username","setUserame","platform","setPlatform","className","to","onSubmit","evt","preventDefault","for","name","id","onChange","e","target","value","type","placeholder","Profile","props","match","params","loading","setLoading","data","setData","error","setError","useEffect","a","axios","result","console","log","response","message","create","class","platformInfo","avatarUrl","alt","platformUserId","segments","metadata","imageUrl","activeLegendName","stats","season2Wins","displayValue","percentile","level","kills","damage","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c48d588.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.badc059d.png\";","import React from \"react\";\nimport logo from \"../assets/logo.png\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.section`\n  img {\n    width: 300px;\n  }\n  @media (max-width: 700px) {\n    img {\n      display: block;\n      margin: auto;\n    }\n  }\n`;\nconst Header = () => {\n    return (\n        <Wrapper>\n            <img src={logo} />\n        </Wrapper>\n    );\n};\n\nexport default Header;\n","import React, {useState} from \"react\";\nimport {Redirect} from 'react-router-dom'\n\nconst Search = () => {\n\n    const [submitted, setSubmitted] = useState(false);\n    const [username, setUserame] = useState(\"\");\n    const [platform, setPlatform] = useState(\"psn\");\n\n    const onSubmit = (evt) => {\n        evt.preventDefault();\n        if(username){\n            setSubmitted(true)\n        }\n    }\n\n    return (\n        <div className=\"search\">\n            {submitted && <Redirect to={`/profile/${platform}/${username}`}/> }\n            <h1>Track Player Stats</h1>\n            <form onSubmit={onSubmit}>\n                <div className='form-group'>\n                    <label for='platform'>Platform</label>\n                    <select name='platform' id='platform' onChange={e => setPlatform(e.target.value)} >\n                        <option value='psn'>Playstation</option>\n                        <option value='xbl'>Xbox</option>\n                        <option value='origin'>Origin</option>\n                    </select>\n                </div>\n                <div className='form-group'>\n                    <label for='username'>Username</label>\n                    <input\n                        type='text'\n                        name='text'\n                        id='username'\n                        onChange={e => setUserame(e.target.value)}\n                        placeholder='Origin ID, Xbox Live gamertag, PSN ID, etc'\n                    />\n                </div>\n                <div className='form-group'>\n                    <input type='submit' value='Submit' className='btn' />\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {Link} from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.section`\n.container {\n    background: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    max-width: 700px;\n    margin: 1rem auto;\n    padding: 2rem 1.5rem;\n    border-radius: 20px;\n  }\n  h1.gamertag {\n    font-size: 2rem;\n    background: rgba(0, 0, 0, 0.6);\n    padding: 0.3rem 0.5rem;\n    text-align: center;\n    border-radius: 20px;\n    margin-bottom: 3rem;\n    display: flex;\n    align-items: center;\n  }\n  a {\n    display: inline-block;\n    margin-top: 2rem;\n    border: #fff 2px solid;\n    padding: 0.5rem 0.8rem;\n  }\n  a:hover {\n    border: #ccc 2px solid;\n    color: #ccc;\n  }\n  .platform-avatar {\n    width: 40px;\n    margin-right: 0.7rem;\n  }\n  img {\n    width: 100%;\n  }\n  .grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 1rem;\n  }\n  li {\n    background: rgba(0, 0, 0, 0.6);\n    padding: 1rem;\n    margin-bottom: 0.7rem;\n    border-radius: 10px;\n  }\n  li p {\n    font-size: 2rem;\n  }\n  li:first-child p {\n    font-size: 1.5rem;\n  }\n  li span {\n    font-size: 1rem;\n    color: #ccc;\n  }\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 1.5rem;\n      display: block;\n      text-align: center;\n    }\n    .platform-avatar {\n      display: none;\n    }\n    .grid {\n      grid-template-columns: 1fr;\n    }\n    li p {\n      font-size: 1.5rem;\n    }\n  }\n`\n\nconst Profile = props => {\n    const [username, setUsername] = useState(props.match.params.username);\n    const [platform, setPlatform] = useState(props.match.params.platform);\n    const [loading, setLoading] = useState(true);\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const create = async (username, platform) => {\n            try {\n                const result = await axios(`/api/v1/profile/${platform}/${username}`);\n                setData(result.data.data);\n                console.log(data);\n                setLoading(false);\n            } catch (err) {\n                setLoading(false);\n                setError(err.response.data.message);\n            }\n        };\n        if (loading) {\n            create(username, platform);\n        }\n    });\n    return (\n        <Wrapper>\n            {loading && <div>\n                <h3>Loading...</h3>\n            </div>}\n\n            {error && <div>\n                <h1>{error}</h1>\n                <Link to='/'>Go Back</Link>\n            </div>}\n            {data && <div className=\"container\">\n                <h1 class=\"gamertag\">\n                <img src={data.platformInfo.avatarUrl} alt class=\"platform-avatar\" />\n                    {data.platformInfo.platformUserId}\n                </h1> \n                <div class=\"grid\">\n                    <div>\n                    <img src={data.segments[1].metadata.imageUrl} alt />\n                    </div>\n                    <div>\n                    <ul>\n                        <li>\n                        <h4>Selected Legend</h4>\n                        <p>{data.metadata.activeLegendName}</p>\n                        </li>\n                        {data.segments[0].stats.season2Wins && <li>\n                        <h4>Season 2 Wins</h4>\n                        <p>\n                            {data.segments[0].stats.season2Wins.displayValue}\n                            <span>({data.segments[0].stats.season2Wins.percentile}%)</span>\n                        </p>\n                        </li>}\n                        {data.segments[0].stats.level && <li>\n                        <h4>Apex Level</h4>\n                        <p>\n                            {data.segments[0].stats.level.displayValue}\n                            <span>({data.segments[0].stats.level.percentile}%)</span>\n                        </p>\n                        </li>}\n                        {data.segments[0].stats.kills && <li>\n                        <h4>Lifetime Kills</h4>\n                        <p>\n                            {data.segments[0].stats.kills.displayValue}\n                            <span>({data.segments[0].stats.kills.percentile}%)</span>\n                        </p>\n                        </li>}\n                        {data.segments[0].stats.damage && <li>\n                        <h4>Damage Done</h4>\n                        <p>\n                            {data.segments[0].stats.damage.displayValue}\n                            <span>({data.segments[0].stats.damage.percentile}%)</span>\n                        </p>\n                        </li>}\n                    </ul>\n                    </div>\n                </div>\n                <Link to=\"/\">Go Back</Link>                     \n            </div>}\n        </Wrapper>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport Profile from './components/Profile'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Router>\n          <Header/>\n          <Route exact path=\"/\" component={Search}/>\n          <Route exact path=\"/profile/:platform/:username\" component={Profile}/>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}